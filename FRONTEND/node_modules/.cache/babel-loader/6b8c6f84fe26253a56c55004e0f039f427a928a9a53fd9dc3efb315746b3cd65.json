{"ast":null,"code":"var _jsxFileName = \"/Users/danaattie/Capstone/FRONTEND/src/App.js\",\n  _s = $RefreshSig$();\n// import \"./App.css\";\n// import { useState, useEffect } from \"react\";\n\n// function App() {\n//   const [portfolio, setPortfolio] = useState(null);\n//   const [total, setTotal] = useState(0);\n//   const [error, setError] = useState(\"\");\n//   const [list, setList] = useState(null);\n//   const [selectedStock, setSelectedStock] = useState(null);\n//   const [selectedInterval, setSelectedInterval] = useState(\"daily\");\n//   const handleStockSelection = (symbol) => setSelectedStock(symbol);\n//   const userId = \"user1\";\n//   // const url = `https://mcsbt-integration-416418.ew.r.appspot.com`;\n//   const url = `http://127.0.0.1:5001`;\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       await fetch(`${url}/api/portfolio`)\n//         .then((response) => response.json())\n//         .then((data) => {\n//           console.log(\"Fetched portfolio data:\", data);\n//           setList(data); // Update the state with the fetched data\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching data:\", error);\n//           // If there's an error, i set some error state and display it\n//         });\n//     }\n//     fetchData();\n//     fetch(\"http://localhost:5001/api/portfolio/update_user\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         user_id: 1,\n//         new_username: \"newuser\",\n//         new_password: \"newpass\",\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => console.error(\"Error:\", error));\n//   }, []);\n\n//   console.log(`got data ${list}`);\n//   const [stockDetails, setStockDetails] = useState(null);\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <h1>Welcome, {userId}</h1>\n//       </header>\n//       <main>\n//         {error && <div className=\"Error-message\">{error}</div>}\n//         {list ? (\n//           <div>\n//             <h2 className=\"Portfolio-value\">\n//               Total Portfolio Value: ${list.total_port_val}\n//             </h2>\n//             <section className=\"Stock-list\">\n//               {Object.entries(list.stocks).map(([symbol, stockInfo]) => (\n//                 <div className=\"Stock-item\" key={symbol}>\n//                   <h3>{symbol}</h3>\n//                   <p>\n//                     {stockInfo.num_stocks} stocks at ${stockInfo.last_close}\n//                   </p>\n//                   <button\n//                     className=\"Select-button\"\n//                     onClick={() => handleStockSelection(symbol)}\n//                   >\n//                     Select\n//                   </button>\n//                 </div>\n//               ))}\n//             </section>\n//           </div>\n//         ) : (\n//           <div>Loading portfolio...</div>\n//         )}\n//       </main>\n//       <footer>\n//         <p>&copy; {new Date().getFullYear()} Floos</p>\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Existing state variables\n  const [list, setList] = useState(null);\n  const [selectedStock, setSelectedStock] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // New state variables for stock update\n  const [updateStockSymbol, setUpdateStockSymbol] = useState(\"\");\n  const [updateAmount, setUpdateAmount] = useState(\"\");\n  const url = `http://127.0.0.1:5001`;\n\n  // Existing useEffect and other logic\n\n  // New function to handle submitting the updated stock amount\n  const handleUpdateSubmit = async () => {\n    const updateData = {\n      stockSymbol: updateStockSymbol,\n      newAmount: updateAmount\n    };\n    try {\n      const response = await fetch(`${url}/api/stock/update`, {\n        // Replace this URL with your actual endpoint\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updateData)\n      });\n      const responseData = await response.json();\n      console.log(\"Update response:\", responseData);\n      // Optionally, refresh your stock list here or show a success message\n    } catch (error) {\n      console.error(\"Update error:\", error);\n      setError(\"Failed to update stock. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome, user1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"Update-stock\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Update Stock Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Stock Symbol\",\n          value: updateStockSymbol,\n          onChange: e => setUpdateStockSymbol(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"New Amount\",\n          value: updateAmount,\n          onChange: e => setUpdateAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdateSubmit,\n          children: \"Update Stock\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hdPM8sR/6TUjxrCTYX+6MDq5aj4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","list","setList","selectedStock","setSelectedStock","error","setError","updateStockSymbol","setUpdateStockSymbol","updateAmount","setUpdateAmount","url","handleUpdateSubmit","updateData","stockSymbol","newAmount","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/danaattie/Capstone/FRONTEND/src/App.js"],"sourcesContent":["// import \"./App.css\";\n// import { useState, useEffect } from \"react\";\n\n// function App() {\n//   const [portfolio, setPortfolio] = useState(null);\n//   const [total, setTotal] = useState(0);\n//   const [error, setError] = useState(\"\");\n//   const [list, setList] = useState(null);\n//   const [selectedStock, setSelectedStock] = useState(null);\n//   const [selectedInterval, setSelectedInterval] = useState(\"daily\");\n//   const handleStockSelection = (symbol) => setSelectedStock(symbol);\n//   const userId = \"user1\";\n//   // const url = `https://mcsbt-integration-416418.ew.r.appspot.com`;\n//   const url = `http://127.0.0.1:5001`;\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       await fetch(`${url}/api/portfolio`)\n//         .then((response) => response.json())\n//         .then((data) => {\n//           console.log(\"Fetched portfolio data:\", data);\n//           setList(data); // Update the state with the fetched data\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching data:\", error);\n//           // If there's an error, i set some error state and display it\n//         });\n//     }\n//     fetchData();\n//     fetch(\"http://localhost:5001/api/portfolio/update_user\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         user_id: 1,\n//         new_username: \"newuser\",\n//         new_password: \"newpass\",\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => console.error(\"Error:\", error));\n//   }, []);\n\n//   console.log(`got data ${list}`);\n//   const [stockDetails, setStockDetails] = useState(null);\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <h1>Welcome, {userId}</h1>\n//       </header>\n//       <main>\n//         {error && <div className=\"Error-message\">{error}</div>}\n//         {list ? (\n//           <div>\n//             <h2 className=\"Portfolio-value\">\n//               Total Portfolio Value: ${list.total_port_val}\n//             </h2>\n//             <section className=\"Stock-list\">\n//               {Object.entries(list.stocks).map(([symbol, stockInfo]) => (\n//                 <div className=\"Stock-item\" key={symbol}>\n//                   <h3>{symbol}</h3>\n//                   <p>\n//                     {stockInfo.num_stocks} stocks at ${stockInfo.last_close}\n//                   </p>\n//                   <button\n//                     className=\"Select-button\"\n//                     onClick={() => handleStockSelection(symbol)}\n//                   >\n//                     Select\n//                   </button>\n//                 </div>\n//               ))}\n//             </section>\n//           </div>\n//         ) : (\n//           <div>Loading portfolio...</div>\n//         )}\n//       </main>\n//       <footer>\n//         <p>&copy; {new Date().getFullYear()} Floos</p>\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  // Existing state variables\n  const [list, setList] = useState(null);\n  const [selectedStock, setSelectedStock] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // New state variables for stock update\n  const [updateStockSymbol, setUpdateStockSymbol] = useState(\"\");\n  const [updateAmount, setUpdateAmount] = useState(\"\");\n\n  const url = `http://127.0.0.1:5001`;\n\n  // Existing useEffect and other logic\n\n  // New function to handle submitting the updated stock amount\n  const handleUpdateSubmit = async () => {\n    const updateData = {\n      stockSymbol: updateStockSymbol,\n      newAmount: updateAmount,\n    };\n\n    try {\n      const response = await fetch(`${url}/api/stock/update`, {\n        // Replace this URL with your actual endpoint\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      const responseData = await response.json();\n      console.log(\"Update response:\", responseData);\n      // Optionally, refresh your stock list here or show a success message\n    } catch (error) {\n      console.error(\"Update error:\", error);\n      setError(\"Failed to update stock. Please try again.\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome, user1</h1>\n      </header>\n      <main>\n        {error && <div className=\"Error-message\">{error}</div>}\n        {/* Existing UI elements */}\n        <section className=\"Update-stock\">\n          <h2>Update Stock Amount</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Stock Symbol\"\n            value={updateStockSymbol}\n            onChange={(e) => setUpdateStockSymbol(e.target.value)}\n          />\n          <input\n            type=\"number\"\n            placeholder=\"New Amount\"\n            value={updateAmount}\n            onChange={(e) => setUpdateAmount(e.target.value)}\n          />\n          <button onClick={handleUpdateSubmit}>Update Stock</button>\n        </section>\n      </main>\n      {/* Footer */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}